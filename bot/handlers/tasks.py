from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS
from bot.api_client import create_task_api, get_user_api
from bot.keyboards import set_subject, set_solve_method, big_text_with_back, prices_back_keyboard, get_main_menu, prices
import logging

router = Router()
logger = logging.getLogger(__name__)


class TaskStates(StatesGroup):
    waiting_for_method = State()
    waiting_for_subject = State()
    waiting_for_text = State()
    waiting_for_files = State()

# --- –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ---
@router.callback_query(F.data == "create_task")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"=== CREATE_TASK: User {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===")
    await callback.message.edit_text("ü§î –ö–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=await set_solve_method())
    await state.set_state(TaskStates.waiting_for_method)

# --- –ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è ---
@router.callback_query(TaskStates.waiting_for_method)
async def handle_method(callback: CallbackQuery, state: FSMContext):
    solve_method = callback.data
    user_id = callback.from_user.id

    await state.update_data(solve_method=solve_method)
    logger.info(f"=== METHOD: User {user_id} –≤—ã–±—Ä–∞–ª '{solve_method}' ===")

    await callback.message.edit_text("üß† –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=await set_subject())
    await state.set_state(TaskStates.waiting_for_subject)

# --- –ü—Ä–µ–¥–º–µ—Ç ---
@router.callback_query(TaskStates.waiting_for_subject)
async def handle_subject(callback: CallbackQuery, state: FSMContext):
    subject = callback.data
    user_id = callback.from_user.id

    await state.update_data(subject=subject)
    logger.info(f"=== SUBJECT: User {user_id} –≤—ã–±—Ä–∞–ª '{subject}' ===")

    long_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        "‚Äî –¢–∏–ø —Ä–∞–±–æ—Ç—ã (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è, –∑–∞—á–µ—Ç, —ç–∫–∑–∞–º–µ–Ω –∏ —Ç.–¥.)\n"
        "‚Äî –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–∞—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).\n"
        "‚Äî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω.\n"
        "‚Äî –û–ø–∏—à–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è.\n"
        "‚Äî –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n\n"
        "üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ.\n"
        "‚è∞ –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –∑–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è."
    )
    # –ö–Ω–æ–ø–∫–∏: –ü—Ä–∞–π—Å (–ø–æ–∫–∞–∂–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º) –∏ –ù–∞–∑–∞–¥ (–≤–µ—Ä–Ω—É—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞)
    await callback.message.edit_text(long_text, reply_markup=await big_text_with_back(back_cb="back_to_subject"))
    await state.set_state(TaskStates.waiting_for_text)

# --- –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ (callback) ---
@router.callback_query(F.data == "back_to_subject")
async def back_to_subject(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üß† –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=await set_subject())
    await state.set_state(TaskStates.waiting_for_subject)

# --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å (–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é) ---
@router.callback_query(F.data == "show_prices")
async def show_prices(callback: CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–π—Å' –∏–∑ main menu –∏–ª–∏ –∏–∑ FSM.
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
      - –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)
      - –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ FSM (–≤ —Ä–∞–º–∫–∞—Ö create task) ‚Äî
        –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥', –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª–∏—Ç –ø—Ä–∞–π—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É main_menu (–ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É)
    text = (callback.message.text or "").lower()
    # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç" –∏–ª–∏ "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –º–µ–Ω—é
    if "–ø—Ä–∏–≤–µ—Ç" in text or "—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in text or "–ø–æ–ª–µ–∑–Ω—ã–µ" in text:
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(prices, reply_markup=await prices_back_keyboard(back_cb="back_to_main"))
    else:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å FSM-—ç–∫—Ä–∞–Ω
        await callback.message.answer(prices, reply_markup=await prices_back_keyboard(back_cb="back_to_task"))

# --- –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ) ---
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_main_menu())

# --- –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏ (—É–¥–∞–ª—è–µ–º –ø—Ä–∞–π—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ) ---
@router.callback_query(F.data == "back_to_task")
async def back_to_task(callback: CallbackQuery):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    try:
        await callback.message.delete()
    except Exception:
        # –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º alert
        pass
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–∫–∏.", show_alert=False)

# --- –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ---
@router.message(TaskStates.waiting_for_text)
async def handle_task_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    problem_text = message.text

    await state.update_data(problem_text=problem_text, file_ids=[])
    logger.info(f"=== TEXT: User {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç ===")

    await message.answer("üìé –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.")
    await state.set_state(TaskStates.waiting_for_files)


# --- –§–∞–π–ª—ã –∑–∞–¥–∞—á–∏ ---
@router.message(TaskStates.waiting_for_files)
async def handle_task_files(
    message: Message,
    state: FSMContext,
    album: list[Message] | None = None,
):
    data = await state.get_data()
    user_id = message.from_user.id
    file_ids: list[str] = data.get("file_ids", [])

    # --- –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª ---
    if message.text and message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        problem_text = data.get("problem_text")
        solve_method = data.get("solve_method")
        subject = data.get("subject")
        file_ids = data.get("file_ids", [])

        status = "pending_ai" if solve_method == "ai_solve_usage" else "waiting_for_solver"

        try:
            user = await get_user_api(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î (get_user_api): {user!r}")

            # –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. ForeignKey -> tg_user_id
            task_data = {
                "user_id": user_id,  # —ç—Ç–æ tg_user_id
                "problem_text": problem_text,
                "subject": subject,
                "status": status,
                "deadline": None,
                "solver_id": None,
                "images": [f["file_id"] if isinstance(f, dict) else f for f in file_ids],
            }

            logger.info("=== Payload create_task_api ===")
            logger.info(task_data)

            result = await create_task_api(task_data)
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

            # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if not ADMIN_IDS:
                logger.warning("ADMIN_IDS –ø—É—Å—Ç ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            else:
                for raw in ADMIN_IDS:
                    try:
                        chat_id = int(raw)
                        await message.bot.send_message(
                            chat_id=chat_id,
                            text="üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –≤–æ–∑—å–º–∏—Ç–µ –≤ —Ä–∞–±–æ—Ç—É.",
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {chat_id}")
                    except Exception as e:
                        logger.exception(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {raw}: {e}")

            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.exception(f"–û—à–∏–±–∫–∞ create_task_api: {e}")

        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ.")
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
    new_files = []
    if album:
        for msg in album:
            if msg.photo:
                new_files.append({"file_id": msg.photo[-1].file_id, "type": "photo"})
            elif msg.document:
                new_files.append({"file_id": msg.document.file_id, "type": "document"})
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_files)} —Ñ–∞–π–ª–æ–≤. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.")
    elif message.photo:
        new_files.append({"file_id": message.photo[-1].file_id, "type": "photo"})
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.")
    elif message.document:
        new_files.append({"file_id": message.document.file_id, "type": "document"})
        await message.answer("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.")

    file_ids.extend(new_files)
    await state.update_data(file_ids=file_ids)
    logger.info(f"=== FILE(S): User {user_id} –¥–æ–±–∞–≤–∏–ª {len(new_files)} —Ñ–∞–π–ª–æ–≤, –≤—Å–µ–≥–æ: {len(file_ids)} ===")
