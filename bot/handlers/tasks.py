from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.api_client import create_task_api, get_user_api
from bot.keyboards import set_subject, set_solve_method
import logging

router = Router()
logger = logging.getLogger(__name__)


# –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –º–µ—Ç–æ–¥ ‚Üí –ø—Ä–µ–¥–º–µ—Ç ‚Üí —Ç–µ–∫—Å—Ç ‚Üí —Ñ–∞–π–ª—ã
class TaskStates(StatesGroup):
    waiting_for_method = State()
    waiting_for_subject = State()
    waiting_for_text = State()
    waiting_for_files = State()


# --- –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ---
@router.callback_query(F.data == "create_task")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"=== CREATE_TASK: User {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===")
    await callback.message.edit_text("ü§î –ö–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=await set_solve_method())
    await state.set_state(TaskStates.waiting_for_method)


# --- –ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è ---
@router.callback_query(TaskStates.waiting_for_method)
async def handle_method(callback: CallbackQuery, state: FSMContext):
    solve_method = callback.data
    user_id = callback.from_user.id

    await state.update_data(solve_method=solve_method)
    logger.info(f"=== METHOD: User {user_id} –≤—ã–±—Ä–∞–ª: '{solve_method}' ===")

    await callback.message.edit_text("üß† –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=await set_subject())
    await state.set_state(TaskStates.waiting_for_subject)


# --- –ü—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏ ---
@router.callback_query(TaskStates.waiting_for_subject)
async def handle_subject(callback: CallbackQuery, state: FSMContext):
    subject = callback.data
    user_id = callback.from_user.id

    await state.update_data(subject=subject)
    logger.info(f"=== SUBJECT: User {user_id} –≤—ã–±—Ä–∞–ª: '{subject}' ===")

    await callback.message.edit_text("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
    await state.set_state(TaskStates.waiting_for_text)


# --- –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ---
@router.message(TaskStates.waiting_for_text)
async def handle_task_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    problem_text = message.text

    await state.update_data(problem_text=problem_text, file_ids=[])  # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    logger.info(f"=== TEXT: User {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ===")

    await message.answer("üìé –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'")
    await state.set_state(TaskStates.waiting_for_files)


# --- –§–æ—Ç–æ/—Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏ (–º—É–ª—å—Ç–∏–∑–∞–≥—Ä—É–∑–∫–∞ + –∞–ª—å–±–æ–º—ã) ---
@router.message(TaskStates.waiting_for_files)
async def handle_task_files(
    message: Message,
    state: FSMContext,
    album: list[Message] | None = None,  # ‚Üê —Å—é–¥–∞ AlbumMiddleware –ø–µ—Ä–µ–¥–∞—Å—Ç –∞–ª—å–±–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
):
    data = await state.get_data()
    user_id = message.from_user.id
    file_ids: list[str] = data.get("file_ids", [])

    # --- –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª ---
    if message.text and message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        problem_text = data["problem_text"]
        solve_method = data["solve_method"]
        subject = data["subject"]
        file_ids = data.get("file_ids", [])

        status = "pending_ai" if solve_method == "ai_solve_usage" else "waiting_for_solver"

        try:
            user = await get_user_api(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user}")

            task_data = {
                "user_id": user_id,
                "problem_text": problem_text,
                "subject": subject,
                "status": status,
                "deadline": None,
                "solver_id": None,
                "images": file_ids,  # <-- —Ç—É—Ç –ø–æ–ø–∞–¥—ë—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
            }

            result = await create_task_api(task_data)
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

            for chat_id in [1105917879, 7365012449]:
                await message.bot.send_message(
                    chat_id=chat_id,
                    text="üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –≤–æ–∑—å–º–∏—Ç–µ –≤ —Ä–∞–±–æ—Ç—É.",
                )

            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {result}")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ create_task_api: {e}")

        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ")
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
    new_files = []
    if album:  # –µ—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º
        for msg in album:
            if msg.photo:
                new_files.append(msg.photo[-1].file_id)
            elif msg.document:
                new_files.append(msg.document.file_id)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_files)} —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'")
    elif message.photo:  # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        new_files.append(message.photo[-1].file_id)
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'")

    elif message.document:  # –æ–¥–∏–Ω–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        new_files.append(message.document.file_id)
        await message.answer("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'")

    # –¥–æ–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    file_ids.extend(new_files)
    await state.update_data(file_ids=file_ids)

    logger.info(f"=== FILE(S): User {user_id} –¥–æ–±–∞–≤–∏–ª {len(new_files)} —Ñ–∞–π–ª–æ–≤, –≤—Å–µ–≥–æ: {len(file_ids)} ===")
