from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.api_client import create_task_api, get_user_api
from bot.keyboards import set_subject, set_solve_method
import logging

router = Router()
logger = logging.getLogger(__name__)

# –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –º–µ—Ç–æ–¥ ‚Üí –ø—Ä–µ–¥–º–µ—Ç ‚Üí —Ç–µ–∫—Å—Ç
class TaskStates(StatesGroup):
    waiting_for_method = State()
    waiting_for_subject = State()
    waiting_for_text = State()


# --- –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ---
@router.callback_query(F.data == "create_task")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"=== CREATE_TASK: User {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===")
    await callback.message.answer("ü§î –ö–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=await set_solve_method())
    await state.set_state(TaskStates.waiting_for_method)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_method")


# --- –ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è ---
@router.callback_query(TaskStates.waiting_for_method)
async def handle_method(callback: CallbackQuery, state: FSMContext):
    solve_method = callback.data
    user_id = callback.from_user.id

    await state.update_data(solve_method=solve_method)
    logger.info(f"=== METHOD: User {user_id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–±: '{solve_method}' ===")

    await callback.message.answer("üß† –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=await set_subject())
    await state.set_state(TaskStates.waiting_for_subject)


# --- –ü—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏ ---
@router.callback_query(TaskStates.waiting_for_subject)
async def handle_subject(callback: CallbackQuery, state: FSMContext):
    subject = callback.data
    user_id = callback.from_user.id

    await state.update_data(subject=subject)
    logger.info(f"=== SUBJECT: User {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç: '{subject}' ===")

    await callback.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª (PDF/—Ñ–æ—Ç–æ)")
    await state.set_state(TaskStates.waiting_for_text)


# --- –¢–µ–∫—Å—Ç / —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏ ---
@router.message(TaskStates.waiting_for_text)
async def handle_task_text(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    logger.info(f"=== TASK_TEXT: User {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª ===")

    content = ""
    file_id = None
    if message.text:
        content = message.text
    elif message.document:
        content = f"[–§–∞–π–ª] {message.document.file_name}"
    elif message.photo:
        file_id = message.photo[-1].file_id

    await state.update_data(problem_text=content, file_id=file_id)

    # –¥–æ—Å—Ç–∞–µ–º solve_method –∏ subject
    solve_method = data["solve_method"]
    subject = data["subject"]

    # —Å—Ç–∞—Ç—É—Å –ø–æ solve_method
    status = "pending_ai" if solve_method == "ai_solve_usage" else "waiting_for_solver"

    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –ë–î
        user = await get_user_api(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user}")

        task_data = {
            "user_id": user_id,
            "problem_text": content,
            "subject": subject,
            "status": status,
            "deadline": None,
            "solver_id": None,
            "file_id": file_id
        }

        result = await create_task_api(task_data)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {result}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ create_task_api: {e}")

    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ")
