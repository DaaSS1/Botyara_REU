from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.services.task_service import save_user_image
from bot.api_client import create_task_api, get_user_api
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.crud import create_task
from bot.keyboards import set_subject, set_solve_method
from app.schemas.tasks import TaskCreate
from app.models.task import Tasks
import logging

router = Router()
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
class TaskStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_subject = State()
    waiting_for_method = State()

@router.callback_query(F.data == "create_task")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"=== CREATE_TASK: User {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===")
    await callback.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª (PDF/—Ñ–æ—Ç–æ)")
    await state.set_state(TaskStates.waiting_for_text)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_text")


@router.message(TaskStates.waiting_for_text)
async def handle_task_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"=== TASK_TEXT: User {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ===")

    content = ""
    file_id = None
    if message.text:
        content = message.text
    elif message.document:
        content = f"[–§–∞–π–ª] {message.document.file_name}"
    elif message.photo:
        content = "PHOTO"
        file_id = message.photo[-1].file_id

    await state.update_data(problem_text=content, file_id = file_id)
    logger.info(f"User {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: {content}")
    await message.answer("üß† –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=await set_subject())
    await state.set_state(TaskStates.waiting_for_subject)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: waiting_for_subject")


@router.callback_query(TaskStates.waiting_for_subject)
async def handle_subject(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    subject = callback.data
    logger.info(f"=== SUBJECT: User {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç: '{subject}' ===")

    await state.update_data(subject=subject)
    await callback.message.answer("ü§î –ö–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=await set_solve_method())
    await state.set_state(TaskStates.waiting_for_method)

    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_method")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
@router.callback_query(F.data.in_(["math", "prog", "inf_sys"]))
async def debug_subject_buttons(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logger.warning(f"DEBUG_SUBJECT: –ö–Ω–æ–ø–∫–∞ '{callback.data}' –Ω–∞–∂–∞—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{current_state}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer(f"–û—Ç–ª–∞–¥–∫–∞: –∫–Ω–æ–ø–∫–∞ {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")


@router.callback_query(TaskStates.waiting_for_method)
async def handle_method(callback: CallbackQuery, state: FSMContext):
    solve_method = callback.data
    data = await state.get_data()
    user_id = callback.from_user.id

    logger.info(f"=== METHOD: –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –º–µ—Ç–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è: '{solve_method}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ===")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
    status = "pending_ai" if solve_method == "ai_solve_usage" else "waiting_for_solver"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
        user = await get_user_api(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user}")

        task_data = {
            "user_id": user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tg_user_id –Ω–∞–ø—Ä—è–º—É—é
            "problem_text": data["problem_text"],
            "subject": data["subject"],
            "status": status,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            "deadline": None,
            "solver_id": None,# –î–æ–±–∞–≤–ª—è–µ–º solver_id
            "file_id": data.get("file_id")
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {task_data}")

        result = await create_task_api(task_data)
        await callback.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {result}")
    except Exception as e:
        await callback.message.answer(f"–•–ê–•–ê–•–ê–•–ê–• –õ–û–®–ê–†–ê –û–®–ò–ë–ö–ê {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ create_task_api –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ")