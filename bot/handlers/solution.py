from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.filters import Command
import logging
from bot.api_client import get_user_api, get_available_tasks_api, assign_task_to_solver_api
from bot.keyboards import show_tasks, create_task_list_keyboard, create_task_choice_keyboard
from pathlib import Path

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command(commands=["check_tasks"]))
async def check_tasks(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        user = await get_user_api(user_id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        # if user.get("role") != "solver":
        #     await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
        #     return

        await message.answer("üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "new_tasks")
async def show_available_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
    user_id = callback.from_user.id

    try:
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        await callback.message.edit_text(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á")

@router.callback_query(F.data == "refresh_tasks")
async def refresh_tasks_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id

    try:
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        await callback.message.edit_text(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")

@router.callback_query(F.data.startswith("view_task_"))
async def view_task_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        available_tasks = await get_available_tasks_api()
        task = next((t for t in available_tasks if t["task_id"] == task_id), None)

        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return

        # if task.get("file_id"):
        #     try:
        #         with open(task["file_id"]) :
        #             if task["file_id"].startswith("AgAC"):
        #                 await callback.message.answer_photo(task["file_id"], caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        #             else:
        #                 await callback.message.answer_document(task["file_id"], caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        #     except FileNotFoundError:
        #         await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
        task_text = f"""
üìù **–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #{task_id}**

üìö **–ü—Ä–µ–¥–º–µ—Ç:** {task['subject']}
üìÑ **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:** {task['problem_text']}
‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task['deadline'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìä **–°—Ç–∞—Ç—É—Å:** {task['status']}

–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?
        """.strip()

        kb = await create_task_choice_keyboard(task_id)

        if task.get("file_id"):
            await callback.message.answer_photo(
                photo=task["file_id"],
                caption=task_text,
                reply_markup=kb
            )
        else:
            await callback.message.answer(task_text, reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏")

@router.callback_query(F.data.startswith("accept_task_"))
async def accept_task(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á—É"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        result = await assign_task_to_solver_api(task_id, user_id)

        await callback.message.edit_text(
            f"‚úÖ **–ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!**\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {result['problem_text'][:100]}...\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {result['subject']}\n\n"
            f"–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–µ—à–µ–Ω–∏—é! üöÄ"
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É {task_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

@router.callback_query(F.data.startswith("reject_task_"))
async def reject_task(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        await callback.message.edit_text(
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–¥–∞—á–∞ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞):",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–¥–∞—á—É {task_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
