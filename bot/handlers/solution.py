from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from aiogram.filters import Command
import logging

from app.core.crud import get_task
from bot.api_client import get_user_api, get_available_tasks_api, assign_task_to_solver_api, create_solution_api, \
    get_task_api
from bot.keyboards import create_task_list_keyboard, create_task_choice_keyboard
import re
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State,StatesGroup

router = Router()
logger = logging.getLogger(__name__)

class SendSolutionStates(StatesGroup):
    waiting_for_photo = State()

@router.message(Command(commands=["check_tasks"]))
async def check_tasks(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        user = await get_user_api(user_id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        # if user.get("role") != "solver":
        #     await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
        #     return

        await message.answer("üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "new_tasks")
async def show_available_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
    user_id = callback.from_user.id

    try:
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        await callback.message.edit_text(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á")

@router.callback_query(F.data == "refresh_tasks")
async def refresh_tasks_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id

    try:
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return

        await callback.message.edit_text(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")

@router.callback_query(F.data.startswith("view_task_"))
async def view_task_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        available_tasks = await get_available_tasks_api()
        task = next((t for t in available_tasks if t["task_id"] == task_id), None)

        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return

        task_text = f"""
üìù **–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #{task_id}**

üìö **–ü—Ä–µ–¥–º–µ—Ç:** {task['subject']}
üìÑ **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:** {task['problem_text']}
‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task['deadline'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìä **–°—Ç–∞—Ç—É—Å:** {task['status']}

–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?
        """.strip()

        kb = await create_task_choice_keyboard(task_id)

        images = task.get("images") or []
        if images:
            # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å ‚Üí —à–ª—ë–º –∞–ª—å–±–æ–º
            media = []
            for i, f_id in enumerate(images):
                if i == 0:
                    media.append(InputMediaPhoto(media=f_id, caption=task_text))
                else:
                    media.append(InputMediaPhoto(media=f_id))

            await callback.message.answer_media_group(media=media)
            # –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∏–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.answer("üëá –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–¥–∞—á–µ:", reply_markup=kb)
        else:
            await callback.message.answer(task_text, reply_markup=kb)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏")

@router.callback_query(F.data.startswith("accept_task_"))
async def accept_task(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á—É"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        result = await assign_task_to_solver_api(task_id, user_id)
        new_text = (
            f"‚úÖ **–ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!**\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {result['problem_text'][:100]}...\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {result['subject']}\n\n"
            f"–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–µ—à–µ–Ω–∏—é! üöÄ"
        )

        if callback.message.photo:
            await callback.message.edit_caption(new_text)
        else:
            await callback.message.edit_text(new_text)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É {task_id}")

        task = await get_task_api(task_id)
        task_user_id = task.get("user_id")
        await callback.bot.send_message(chat_id=task_user_id, text="üì¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω –ø—Ä–∏—à–ª–µ—Ç —Ä–µ—à–µ–Ω–∏–µ. "
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É üí≥")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

@router.callback_query(F.data.startswith("reject_task_"))
async def reject_task(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É"""
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])

    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        available_tasks = await get_available_tasks_api()

        if not available_tasks:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        await callback.message.edit_text(
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–¥–∞—á–∞ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞):",
            reply_markup=await create_task_list_keyboard(available_tasks)
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–¥–∞—á—É {task_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

@router.message(F.text.regexp(r"^/send_solution_(\d+)$"))
async def start_solution(message: Message,state: FSMContext):
    m = re.match(r"^/send_solution_(\d+)$", message.text)
    task_id = int(m.group(1))
    await state.update_data(current_task_id = task_id)
    await state.set_state(SendSolutionStates.waiting_for_photo)
    await message.answer(f"–û–∫–µ–π, –∂–¥—É —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}")

@router.message(SendSolutionStates.waiting_for_photo, F.photo)
async def send_photo_solution(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("current_task_id")
    if not task_id:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π: /send_solution_<task_id>")
        return

    solver_id = message.from_user.id
    file_ids = [p.file_id for p in message.photo]
    caption = message.caption or ""

    solution_data = {
        "solver_id": solver_id,
        "file_ids": file_ids,
        "caption": caption
    }

    try:
        resp = await create_solution_api(task_id, solution_data)
    except Exception:
        logger.exception("Create solution failed")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è. –ü—Ä–æ–±—É–π –ø–æ–∑–∂–µ —Å—É–∫–∞")
        return

    task_user_id = resp.get("task_user_id")
    if not task_user_id:
        try:
            task = await get_task_api(task_id)
            task_user_id = task.get("user_id")
        except Exception:
            logger.exception("get_task_api failed")
            await message.reply("–†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞.")
            return

    try:
        if len(file_ids) > 1:
            # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Üí –∞–ª—å–±–æ–º
            media = []
            for i, f_id in enumerate(file_ids):
                if i == 0:
                    media.append(InputMediaPhoto(media=f_id, caption="üì§ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –í–∞—à–µ–π –∑–∞–¥–∞—á–µ"))
                else:
                    media.append(InputMediaPhoto(media=f_id))
            await message.bot.send_media_group(chat_id=task_user_id, media=media)
        else:
            # –æ–¥–Ω–æ —Ñ–æ—Ç–æ
            await message.bot.send_photo(
                chat_id=task_user_id,
                photo=file_ids[0],
                caption="üì§ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –í–∞—à–µ–π –∑–∞–¥–∞—á–µ"
            )
    except Exception:
        logger.exception("send_photo to owner failed")
        await message.reply("–†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —Ñ–æ—Ç–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É.")
        return

    await message.reply(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ #{task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await state.clear()