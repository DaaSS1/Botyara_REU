from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from httpx import HTTPStatusError

from bot.keyboards import get_main_menu
from bot.api_client import create_user_api, get_user_api, update_user_api
import logging
# –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ keyboards.py

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command('start'))
async def start_command(message: Message):

    user_id = message.from_user.id
    tg_name = message.from_user.username or "unknown"
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç {user_id}, username={tg_name}")

    try:
        user = await get_user_api(user_id)
        if tg_name!="unknown" and user.get("tg_name")!= tg_name:
            try:
                user = await update_user_api(user_id, {"tg_name": tg_name})
                logger.info(f"–û–±–Ω–æ–≤–∏–ª tg_name –¥–ª—è {user_id} -> {tg_name}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å tg_name –¥–ª—è {user_id}: {e}")
        if get_user_api(user_id):
            await message.answer(f"üîÅ –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user.get('tg_name') or tg_name}!")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")

    except HTTPStatusError as e:
        if e.response.status_code == 400:
            user_data = {
                "tg_user_id": user_id,
                "tg_name": tg_name,
                "role": "student", #–ø–æ –∞–π–¥–∏ –∏–∑ –±–¥ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Ä–æ–ª—å, –ø—Ä–∏–º–µ—Ä - –ø—Ä–æ–µ–∫—Ç –¢–∏–º–æ—Ö–∏
                "high_school": "–†–≠–£", # –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
                "year": 1
            }
            try:
                created = await create_user_api(user_data)
                await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {created['tg_name']}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created}")
            except Exception as ce:
                await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ce}")
                return

        else:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return

    except Exception as e:
        await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ /start –¥–ª—è {user_id}: {e}")
        return

    await message.answer("–°–∞–ª–∞–º –ø–æ–ø–æ–ª–∞–º, —Ç–∞–ø–æ–∫",
                         reply_markup=await get_main_menu())